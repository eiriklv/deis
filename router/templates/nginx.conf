# required to run in a container
daemon off;

worker_processes {{ .deis_router_workerProcesses }};

events {
    worker_connections {{ .deis_router_workerConnections }};
}

http {
    # basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_names_hash_bucket_size 64;
    default_type application/octet-stream;

    include /usr/local/nginx/conf/mime.types;

    # send logs to STDOUT so they can be seen using 'docker logs'
    access_log /dev/stdout;
    error_log /dev/stdout;

    server {
        listen {{ .deis_router_port }} default_server;
        server_name_in_redirect off;
        port_in_redirect off;

        location / {
            set $upstream "";

            rewrite_by_lua '
                local redis  = require "redis"
                local client = redis.connect("{{ .deis_cache_host }}", {{ .deis_cache_port }})
                local route  = client:get(ngx.var.http_host)

                -- send the route to proxy_pass if we found a match
                if route ~= nil then
                    ngx.var.upstream = route
                else
                    ngx.exit(ngx.HTTP_NOT_FOUND)
                end
            ';

            proxy_buffering             off;
            proxy_set_header            Host $host;
            proxy_set_header            X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_redirect              off;
            proxy_connect_timeout       10;
            proxy_send_timeout          30;
            proxy_read_timeout          30;
            proxy_pass                  http://$upstream;
        }
    }
}
